### To run these tests:
###    Make sure you have the extension "REST Client" by Huachao Mao installed in your VSCode to run these tests.
###    You made need to add test data to sql_scripts/schema_load.sql
###
### To check if the tests passed:
###    Look at the response code and body in the REST Client
###    output window. Make sure the field names and types 
###    match what is in user model in the original backend.

### Test GET all posts 
GET http://localhost:3000/api/posts/getAllPosts
Accept: application/json

### Test GET all posts test 
GET http://localhost:3000/api/posts/getAllPosts/test
Accept: application/json

######################################

### Test GET all posts by id 
GET http://localhost:3000/api/posts/getPostById/33333333-3333-3333-3333-333333333333
Accept: application/json

### Test GET all posts by id test 
GET http://localhost:3000/api/posts/getPostById/33333333-3333-3333-3333-333333333333/test
Accept: application/json

######################################

### Test DELETE a specific post 
DELETE http://localhost:3000/api/posts/deletePost/33333333-3333-3333-3333-333333333333
Accept: application/json

### Test DELETE a specific post test 
GET http://localhost:3000/api/posts/deletePost/33333333-3333-3333-3333-333333333333/test
Accept: application/json

######################################

### Create POST 

POST http://localhost:3000/api/posts/createPost
Content-Type: application/json
Accept: application/json

{
  "postId": "33333333-3333-3333-3333-333333333333",
  "userId": "11111111-1111-1111-1111-111111111111",
  "content": "Hello, this is a new post!",
  "imageUri": null,
  "isSensitive": false,
  "hasOffensiveText": false
}

### Create POST test 

GET http://localhost:3000/api/posts/createPost/test
Accept: application/json

######################################

### Update a post's content
POST http://localhost:3000/api/posts/updatePost
Content-Type: application/json

{
  "postId": "33333333-3333-3333-3333-333333333333",
  "content": "Updated content for this post!"
}

### Update a post's content test 
GET http://localhost:3000/api/posts/updatePost/test
Content-Type: application/json

######################################

### Search POST by id
GET http://localhost:3000/api/posts/searchPost?postId=33333333-3333-3333-3333-333333333333
Content-Type: application/json

######################################

### Search POST by id test
GET http://localhost:3000/api/posts/searchPost?postId=33333333-3333-3333-3333-333333333333
Content-Type: application/json

######################################

### ðŸ§© Get paginated posts (manual) â€” YACINE
GET http://localhost:3000/api/posts/getPostPage?page=1&postPerPage=2
Accept: application/json


### âœ… Test paginated posts route (automated) â€” YACINE
GET http://localhost:3000/api/posts/getPostPage/test
Accept: application/json

######################################

### Get paginated posts by username -- YACINE
GET http://localhost:3000/api/posts/getPostPageByUsername/test_user1?page=1&postPerPage=3
Accept: application/json


### âœ… Test getPostPageByUsername route (automated) â€” YACINE
GET http://localhost:3000/api/posts/getPostPageByUsername/test
Accept: application/json

######################################

### Upload image to post
POST http://localhost:3000/api/posts/uploadImage
Content-Type: multipart/form-data; boundary=FormBoundary

--FormBoundary
Content-Disposition: form-data; name="post_id"

33333333-3333-3333-3333-333333333333
--FormBoundary
Content-Disposition: form-data; name="image"; filename="test_image.jpg"
Content-Type: image/jpeg

< ./test_image.jpg
--FormBoundary--

### Upload image to test post (unit test)
GET http://localhost:3000/api/posts/uploadImage/test
Content-Type: application/json


###  Get number of posts a user has liked testing
GET http://localhost:3000/api/user-numberOfPostsLiked/11111111-1111-1111-1111-111111111111
Accept: application/json


###Test number of posts liked by useer
GET http://localhost:3000/api/user-numberOfPostsLiked/test
Accept: application/json