### To run these tests:
###    Make sure you have the extension "REST Client" by Huachao Mao installed in your VSCode to run these tests.
###    You made need to add test data to sql_scripts/schema_load.sql
###
### To check if the tests passed:
###    Look at the response code and body in the REST Client
###    output window. Make sure the field names and types 
###    match what is in user model in the original backend.

### Test GET all users
GET https://ssu-social-newwave.vercel.app/api/user/getAll
Accept: application/json

### Test GET specific user by its user id
GET https://ssu-social-newwave.vercel.app/api/user/getUserById/11111111-1111-1111-1111-111111111111
Accept: application/json

### Automated testing
GET https://ssu-social-newwave.vercel.app/api/user/test
Accept: application/json

#Lindsey's tests
### Test POST /login - successful login
POST https://ssu-social-newwave.vercel.app/api/user/login
Content-Type: application/json

{
  "username": "test_user1",
  "password": "dummy_password_hash1"
}

### Test POST /login - wrong password
POST https://ssu-social-newwave.vercel.app/api/user/login
Content-Type: application/json

{
  "username": "test_user1",
  "password": "wrongpassword"
}

### Test POST /login - non-existent user
POST https://ssu-social-newwave.vercel.app/api/user/login
Content-Type: application/json

{
  "username": "nonexistent_user",
  "password": "anypassword"
}

### Test POST /signup - successful signup
### Test against Vercel
POST https://ssu-social-newwave.vercel.app/api/user/signup
Content-Type: application/json

{
  "username": "new_signup_user2",
  "email": "new_signup_user2@example.com",
  "password": "newuserpassword"
}

### Test POST /signup - username/email conflict
POST https://ssu-social-newwave.vercel.app/api/user/signup
Content-Type: application/json

{
  "username": "signup_existing_user",
  "email": "signup_existing_user@example.com",
  "password": "anypassword"
}

### Test DELETE /deleteById/[id] - successful delete
DELETE https://ssu-social-newwave.vercel.app/api/user/deleteById/11111111-1111-1111-1111-111111111111
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjExMTExMTExLTExMTEtMTExMS0xMTExLTExMTExMTExMTExMSIsImVtYWlsIjoidGVzdF91c2VyMUBleGFtcGxlLmNvbSIsInVzZXJuYW1lIjoidGVzdF91c2VyMSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzYwMDQzNDg5LCJleHAiOjE3NjAwNDQzODl9.uAWWAd3Dj5CiJDlA_lC6wWE2__oXaIq4EN6dxDIYvZ0
# Authorization is the accessToken from login

### Test POST /user/removeProfileImage - remove profile image to default (by user_id)
POST http://localhost:3000/api/user/removeProfileImage
Content-Type: application/json

{
  "user_id": "11111111-1111-1111-1111-111111111111"
}

### Test GET /user/getUserByUserName/[username] - existing user
GET http://localhost:3000/api/user/getUserByUsername/test_user1
Accept: application/json

###

### Test GET /user/getUserByUserName/[username] - non existent user
GET http://localhost:3000/api/user/getUserByUsername/nonexistent_user
Accept: application/json

### Test Delete All Users
POST http://localhost:3000/api/user/deleteAll
Content-Type: application/json

###

