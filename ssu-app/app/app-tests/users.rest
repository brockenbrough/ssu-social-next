### To run these tests:
###    Make sure you have the extension "REST Client" by Huachao Mao installed in your VSCode to run these tests.
###    You made need to add test data to sql_scripts/schema_load.sql
###
### To check if the tests passed:
###    Look at the response code and body in the REST Client
###    output window. Make sure the field names and types 
###    match what is in user model in the original backend.

### Test GET all users
GET https://ssu-social-newwave.vercel.app/api/user/getAll
Accept: application/json

### Test GET specific user by its user id
GET https://ssu-social-newwave.vercel.app/api/user/getUserById/11111111-1111-1111-1111-111111111111
Accept: application/json

### Automated testing
GET https://ssu-social-newwave.vercel.app/api/user/test
Accept: application/json

#Lindsey's tests
### Test POST /login - successful login
POST https://ssu-social-newwave.vercel.app/api/user/login
Content-Type: application/json

{
  "username": "testing101",
  "password": "testing101"
}

### Test POST /login - wrong password
POST https://ssu-social-newwave.vercel.app/api/user/login
Content-Type: application/json

{
  "username": "test_user1",
  "password": "wrongpassword"
}

### Test POST /login - non-existent user
POST https://ssu-social-newwave.vercel.app/api/user/login
Content-Type: application/json

{
  "username": "nonexistent_user",
  "password": "anypassword"
}

### Test POST /signup - successful signup
### Test against Vercel
POST https://ssu-social-newwave.vercel.app/api/user/signup
Content-Type: application/json

{
  "username": "testing101",
  "email": "testing101@gmail.com",
  "password": "testing101"
}

### Test POST /signup - username/email conflict
POST https://ssu-social-newwave.vercel.app/api/user/signup
Content-Type: application/json

{
  "username": "signup_existing_user",
  "email": "signup_existing_user@example.com",
  "password": "anypassword"
}

### Test DELETE /deleteById/[id] - successful delete
DELETE https://ssu-social-newwave.vercel.app/api/user/deleteById/11111111-1111-1111-1111-111111111111
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjExMTExMTExLTExMTEtMTExMS0xMTExLTExMTExMTExMTExMSIsImVtYWlsIjoidGVzdF91c2VyMUBleGFtcGxlLmNvbSIsInVzZXJuYW1lIjoidGVzdF91c2VyMSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzYwMDQzNDg5LCJleHAiOjE3NjAwNDQzODl9.uAWWAd3Dj5CiJDlA_lC6wWE2__oXaIq4EN6dxDIYvZ0
# Authorization is the accessToken from login

### Test POST /profile/remove - remove profile image to default (by user_id)
POST http://localhost:3000/api/profile/remove
Content-Type: application/json

{
  "user_id": "11111111-1111-1111-1111-111111111111"
}

### Test GET /user/getUserByUserName/[username] - existing user
GET http://localhost:3000/api/user/getUserByUsername/test_user1
Accept: application/json

###

### Test GET /user/getUserByUserName/[username] - non existent user
GET http://localhost:3000/api/user/getUserByUsername/nonexistent_user
Accept: application/json

### Test Delete All Users
POST http://localhost:3000/api/user/deleteAll
Content-Type: application/json

###

### Test GET /user/search/:searchInput 
GET http://localhost:3000/api/user/search/unknown
Accept: application/json

### test LOCAL signup
POST http://localhost:3000/api/user/signup
Content-Type: application/json

{
  "username": "testing12345",
  "email": "testing12345@gmail.com",
  "password": "testing12345"
}
### test LOCAL login
POST http://localhost:3000/api/user/login
Content-Type: application/json

{
  "username": "testing12345",
  "password": "testing12345"
}



### Test PUT /user/edit - successful update
### This route updates user information for the currently logged-in user.
### Requires a valid Bearer accessToken in the Authorization header.
### Make sure the token belongs to the same user you're editing.

PUT http://localhost:3000/api/user/editUser
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjExMTExMTExLTExMTEtMTExMS0xMTExLTExMTExMTExMTExMSIsImVtYWlsIjoidGVzdF91c2VyMUBleGFtcGxlLmNvbSIsInVzZXJuYW1lIjoidGVzdF91c2VyMSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzYwNzA3NDAxLCJleHAiOjE3NjA3MTEwMDF9.-QMEzblnCOB1SeklwnKi81r_f_2RPPH3MjVbWuAs6HY
Accept: application/json

{
  "username": "updated_test_user1",
  "email": "updated_test_user1@example.com",
  "biography": "This is the updated bio from REST test.",
  "password": "new_secure_password123"
}

### something
### Test PUT /user/edit - missing token (should fail)
PUT http://localhost:3000/api/user/editUser
Content-Type: application/json
Accept: application/json

{
  "username": "unauthorized_update"
}

### test generate-token, this method takes your access token and EXTENDS the life of it.
### paramater: accesssToken
GET http://localhost:3000/api/generate-token
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjNmYzU0ZmMwLTYxOTctNDNlNC04YmJjLTNhYTNhYWFhZDMzZSIsImVtYWlsIjoidGVzdGluZzEyMzQ1QGdtYWlsLmNvbSIsInVzZXJuYW1lIjoidGVzdGluZzEyMzQ1Iiwicm9sZSI6InVzZXIiLCJpYXQiOjE3NjE3NTA2NDAsImV4cCI6MTc2MTc1NDI0MH0._O2O8hL_mtKnq8wjJ4whKnzDWmhgy1HIC6nYihBKolE
Accept: application/json

### test refresh-token , This takes your refresh token and gives you a new refresh and access token
### paramater: refreshToken
POST http://localhost:3000/api/user/refresh-token
Content-Type: application/json

{
  "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjNmYzU0ZmMwLTYxOTctNDNlNC04YmJjLTNhYTNhYWFhZDMzZSIsImVtYWlsIjoidGVzdGluZzEyMzQ1QGdtYWlsLmNvbSIsInVzZXJuYW1lIjoidGVzdGluZzEyMzQ1Iiwicm9sZSI6InVzZXIiLCJpYXQiOjE3NjE3NTA5MTQsImV4cCI6MTc2MjM1NTcxNH0.v9Yt0ifc-md7XS6jfIi1m9zEbIYWXVDPDOy2ltEWy5M"
}

######################################
### Test POST /profile/upload -set profile image by user_id
POST http://localhost:3000/api/profile/upload
Content-Type: application/json
Accept: application/json

{
  "user_id": "11111111-1111-1111-1111-111111111111",
  "image_url": "https://ssusocial.s3.amazonaws.com/profilepictures/test-profile-image.png"
}

### Test GET /profile/upload/test - automated verification
GET http://localhost:3000/api/profile/upload/test
Accept: application/json

### ðŸ”¹ 1. Test fetching multiple users by IDs
POST http://localhost:3000/api/user/getUsersByIds
Content-Type: application/json

{
  "userIds": [
    "22222222-2222-2222-2222-222222222222",
    "33333333-3333-3333-3333-333333333333"
  ]
}

### ðŸ”¹ 2. Test when userIds array is empty
POST http://localhost:3000/api/user/getUsersByIds
Content-Type: application/json

{
  "userIds": []
}

### ðŸ”¹ 3. Test invalid request (not array)
POST http://localhost:3000/api/user/getUsersByIds
Content-Type: application/json

{
  "userIds": "invalid-string"
}

### Test GET /get-bio/[id] (LOCAL)
GET http://localhost:3000/api/get-bio/11111111-1111-1111-1111-111111111111
//Authorization: Bearer REPLACE_WITH_ACCESS_TOKEN
Accept: application/json

### Test GET /get-bio/[id] (Vercel)
GET https://ssu-social-newwave.vercel.app/api/get-bio/11111111-1111-1111-1111-111111111111
//Authorization: Bearer REPLACE_WITH_ACCESS_TOKEN
Accept: application/json

### Test PUT /update-bio/[id] (LOCAL)
PUT http://localhost:3000/api/update-bio/11111111-1111-1111-1111-111111111111
Content-Type: application/json
//Authorization: Bearer REPLACE_WITH_ACCESS_TOKEN

{
  "biography": "I don't got internet"
}

### Test PUT /update-bio/[id] (Vercel)
PUT https://localhost:3000/api/update-bio/11111111-1111-1111-1111-111111111111
Content-Type: application/json
//Authorization: Bearer REPLACE_WITH_ACCESS_TOKEN

{
  "biography": "Hello from Vercel test for bio."
}